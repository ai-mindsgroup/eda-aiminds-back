"""Script de valida√ß√£o da camada de abstra√ß√£o LLM - TAREFA 1.4
=================================================================

Testa se RAGDataAgent agora usa LangChainLLMManager corretamente.
"""

import sys
from pathlib import Path

# Adiciona raiz do projeto ao path
root_dir = Path(__file__).parent
sys.path.insert(0, str(root_dir))

from src.agent.rag_data_agent import RAGDataAgent
from src.utils.logging_config import get_logger

logger = get_logger(__name__)

def test_llm_abstraction():
    """Testa inicializa√ß√£o LLM via abstra√ß√£o."""
    
    print("\n" + "="*80)
    print("TESTE: Inicializa√ß√£o LLM via Camada de Abstra√ß√£o (TAREFA 1.4)")
    print("="*80 + "\n")
    
    try:
        # Inicializar RAGDataAgent (sem session_id - gerenciado internamente)
        print("1Ô∏è‚É£ Inicializando RAGDataAgent...")
        agent = RAGDataAgent()
        
        # Verificar LLM
        print("\n2Ô∏è‚É£ Verificando LLM inicializado...\n")
        
        if agent.llm is None:
            print("‚ùå FALHA: agent.llm √© None")
            print("   Causa prov√°vel: Nenhuma API key configurada")
            return False
        
        llm_type = type(agent.llm).__name__
        print(f"‚úÖ LLM Type: {llm_type}")
        print(f"‚úÖ LLM Available: True")
        
        # Verificar qual provedor foi usado
        print("\n3Ô∏è‚É£ Identificando provedor ativo...\n")
        
        if "ChatGroq" in llm_type:
            print("‚úÖ SUCESSO: GROQ inicializado via abstra√ß√£o")
            print("   Ordem de prioridade respeitada: GROQ (primeiro)")
            success = True
        elif "ChatGoogleGenerativeAI" in llm_type:
            print("‚ö†Ô∏è AVISO: Google Gemini inicializado")
            print("   GROQ n√£o dispon√≠vel, fallback para Google funcionou")
            success = True
        elif "ChatOpenAI" in llm_type:
            print("‚ö†Ô∏è AVISO: OpenAI inicializado")
            print("   GROQ e Google n√£o dispon√≠veis, fallback para OpenAI funcionou")
            success = True
        else:
            print(f"‚ö†Ô∏è AVISO: Provedor desconhecido: {llm_type}")
            success = True
        
        # Teste adicional: verificar se abstra√ß√£o est√° sendo usada
        print("\n4Ô∏è‚É£ Verificando uso da abstra√ß√£o...\n")
        
        # Tentar acessar LangChainLLMManager
        try:
            from src.llm.langchain_manager import get_langchain_llm_manager
            manager = get_langchain_llm_manager()
            print(f"‚úÖ LangChainLLMManager acess√≠vel")
            print(f"‚úÖ Provedor ativo no manager: {manager.active_provider.value.upper()}")
            
            # Verificar status dos provedores
            status = manager.get_provider_status()
            print(f"\nüìä Status dos Provedores:")
            for provider, info in status['providers'].items():
                available = "‚úÖ" if info['available'] else "‚ùå"
                print(f"   {available} {provider.upper()}: {info['message']}")
            
        except Exception as e:
            print(f"‚ùå Erro ao acessar LangChainLLMManager: {e}")
            success = False
        
        print("\n" + "="*80)
        if success:
            print("‚úÖ TESTE PASSOU: RAGDataAgent usa abstra√ß√£o corretamente")
        else:
            print("‚ùå TESTE FALHOU: Problemas identificados")
        print("="*80 + "\n")
        
        return success
        
    except Exception as e:
        print(f"\n‚ùå ERRO CR√çTICO: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_llm_abstraction()
    sys.exit(0 if success else 1)
