"""Demo completo do sistema de carregamento de dados EDA AI Minds.

Este script demonstra todas as funcionalidades do sistema de carregamento:
- Carregamento de diferentes fontes (arquivo, URL, dados sint√©ticos)
- Valida√ß√£o autom√°tica de qualidade
- Limpeza autom√°tica de dados
- An√°lise inteligente integrada
- Interface unificada e simples
"""
import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio raiz ao PYTHONPATH
sys.path.insert(0, str(Path(__file__).resolve().parents[1]))

import pandas as pd
import numpy as np

# Importar o novo sistema de carregamento
from src.data.data_processor import DataProcessor, create_demo_data, load_csv_file
from src.data.data_loader import DataLoader
from src.data.data_validator import DataValidator


def demo_basic_usage():
    """Demonstra√ß√£o b√°sica do sistema de carregamento."""
    print("üöÄ DEMO: Sistema de Carregamento EDA AI Minds")
    print("=" * 60)
    
    # 1. Criar dados sint√©ticos para demonstra√ß√£o
    print("\nüìä 1. Carregando dados sint√©ticos de fraude...")
    processor = create_demo_data("fraud_detection", num_rows=2000, fraud_rate=0.06)
    
    # Ver resumo dos dados carregados
    summary = processor.get_dataset_summary()
    print(f"‚úÖ Dados carregados: {summary['basic_info']['shape'][0]} linhas, {summary['basic_info']['shape'][1]} colunas")
    
    if 'validation' in summary:
        print(f"üîç Qualidade dos dados: {summary['validation']['overall_score']:.1f}/100")
    
    if 'cleaning' in summary:
        print(f"üßπ Limpeza autom√°tica: {summary['cleaning']['actions_taken']} a√ß√µes realizadas")
    
    # 2. Executar an√°lises r√°pidas
    print("\nüìà 2. Executando an√°lises autom√°ticas...")
    quick_results = processor.quick_analysis()
    
    # Mostrar resultados das an√°lises
    if 'basic_stats' in quick_results and 'content' in quick_results['basic_stats']:
        print("üìã Estat√≠sticas b√°sicas:")
        print(quick_results['basic_stats']['content'][:300] + "...")
    
    if 'fraud_analysis' in quick_results and 'content' in quick_results['fraud_analysis']:
        print("\nüö® An√°lise de fraude:")
        print(quick_results['fraud_analysis']['content'][:300] + "...")
    
    # 3. An√°lises interativas
    print("\nüí¨ 3. An√°lises interativas...")
    queries = [
        "Quantas transa√ß√µes temos por categoria de merchant?",
        "Qual a correla√ß√£o entre valor e dist√¢ncia de casa?",
        "Mostre estat√≠sticas das transa√ß√µes fraudulentas vs leg√≠timas"
    ]
    
    for i, query in enumerate(queries, 1):
        print(f"\nüìù Consulta {i}: {query}")
        result = processor.analyze(query)
        if 'content' in result:
            print("Resposta:", result['content'][:200] + "...")
    
    return processor


def demo_advanced_features():
    """Demonstra√ß√£o de funcionalidades avan√ßadas."""
    print("\n" + "=" * 60)
    print("üî¨ DEMO: Funcionalidades Avan√ßadas")
    print("=" * 60)
    
    # 1. Carregamento com valida√ß√£o personalizada
    print("\n1. Carregamento com configura√ß√µes personalizadas...")
    processor = DataProcessor(auto_validate=True, auto_clean=False)
    
    # Criar dados com problemas propositais para demonstrar valida√ß√£o
    problematic_data = pd.DataFrame({
        'id': [1, 2, 2, 4, 5],  # Duplicata
        'value': [100, 200, None, '300', 'invalid'],  # Tipos mistos
        'category': ['A', 'B', '', 'C', None],  # Valores vazios
        'weird_col_name!@#': [1, 2, 3, 4, 5],  # Nome problem√°tico
        '': [1, 1, 1, 1, 1]  # Coluna sem nome
    })
    
    result = processor.load_from_dataframe(problematic_data, "dados_problematicos")
    print(f"‚úÖ Dados carregados (com problemas): {result['message']}")
    
    if 'validation' in result:
        print(f"‚ö†Ô∏è  Qualidade: {result['validation']['score']:.1f}/100")
        print(f"   Erros: {result['validation']['errors']}, Avisos: {result['validation']['warnings']}")
    
    # 2. Relat√≥rio detalhado de qualidade
    print("\n2. Relat√≥rio detalhado de qualidade...")
    quality_report = processor.get_data_quality_report()
    print(f"üìä Score geral: {quality_report['overall_score']:.1f}/100")
    print(f"üéØ Completude: {quality_report['data_quality']['quality_metrics']['completeness']:.1f}%")
    print(f"üîÑ Unicidade: {quality_report['data_quality']['quality_metrics']['uniqueness']:.1f}%")
    
    # 3. Sugest√µes de melhoria
    print("\n3. Sugest√µes de melhoria...")
    suggestions = processor.suggest_improvements()
    for i, suggestion in enumerate(suggestions[:3], 1):
        print(f"   {i}. [{suggestion['priority'].upper()}] {suggestion['description']}")
    
    # 4. Limpeza manual
    print("\n4. Aplicando limpeza manual...")
    validator = DataValidator()
    df_clean, cleaning_report = validator.clean_dataframe(processor.current_df, auto_fix=True)
    
    print(f"üßπ {len(cleaning_report['actions_taken'])} a√ß√µes de limpeza realizadas:")
    for action in cleaning_report['actions_taken'][:5]:
        print(f"   ‚Ä¢ {action}")
    
    if cleaning_report['rows_removed'] > 0:
        print(f"üóëÔ∏è  {cleaning_report['rows_removed']} linhas removidas")
    
    return processor


def demo_multiple_sources():
    """Demonstra√ß√£o de carregamento de m√∫ltiplas fontes."""
    print("\n" + "=" * 60)
    print("üåê DEMO: M√∫ltiplas Fontes de Dados")
    print("=" * 60)
    
    sources_demo = []
    
    # 1. Dados sint√©ticos de vendas
    print("\n1. Dados sint√©ticos - Vendas...")
    try:
        processor = create_demo_data("sales", num_rows=500, start_date="2024-01-01")
        summary = processor.get_dataset_summary()
        sources_demo.append({
            'type': 'Vendas Sint√©ticas',
            'shape': summary['basic_info']['shape'],
            'columns': len(summary['basic_info']['columns'])
        })
        print(f"‚úÖ {summary['basic_info']['shape'][0]} transa√ß√µes de vendas carregadas")
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
    
    # 2. Dados sint√©ticos de clientes
    print("\n2. Dados sint√©ticos - Clientes...")
    try:
        processor = create_demo_data("customer", num_rows=300)
        summary = processor.get_dataset_summary()
        sources_demo.append({
            'type': 'Clientes Sint√©ticos', 
            'shape': summary['basic_info']['shape'],
            'columns': len(summary['basic_info']['columns'])
        })
        print(f"‚úÖ {summary['basic_info']['shape'][0]} perfis de clientes carregados")
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
    
    # 3. Dados gen√©ricos
    print("\n3. Dados sint√©ticos - Gen√©ricos...")
    try:
        processor = create_demo_data("generic", num_rows=200, num_numeric=7, num_categorical=4)
        summary = processor.get_dataset_summary()
        sources_demo.append({
            'type': 'Gen√©ricos',
            'shape': summary['basic_info']['shape'], 
            'columns': len(summary['basic_info']['columns'])
        })
        print(f"‚úÖ {summary['basic_info']['shape'][0]} registros gen√©ricos carregados")
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
    
    # Resumo das fontes testadas
    print(f"\nüìä Resumo - {len(sources_demo)} fontes testadas:")
    for source in sources_demo:
        print(f"   ‚Ä¢ {source['type']}: {source['shape'][0]} linhas √ó {source['columns']} colunas")
    
    return processor


def demo_export_capabilities():
    """Demonstra√ß√£o de capacidades de exporta√ß√£o."""
    print("\n" + "=" * 60)
    print("üíæ DEMO: Exporta√ß√£o de Dados")
    print("=" * 60)
    
    # Criar dados para exporta√ß√£o
    processor = create_demo_data("fraud_detection", num_rows=1000)
    
    # Exportar para CSV
    export_file = "dados_processados_demo.csv"
    success = processor.export_to_csv(export_file)
    
    if success:
        print(f"‚úÖ Dados exportados para: {export_file}")
        
        # Verificar arquivo exportado
        if os.path.exists(export_file):
            file_size = os.path.getsize(export_file) / 1024  # KB
            print(f"üìÅ Tamanho do arquivo: {file_size:.1f} KB")
            
            # Testar re-carregamento
            print("\nüîÑ Testando re-carregamento do arquivo exportado...")
            processor_reload = DataProcessor()
            result = processor_reload.load_from_file(export_file)
            
            if result['success']:
                print(f"‚úÖ Re-carregamento bem-sucedido: {result['message']}")
            else:
                print(f"‚ùå Falha no re-carregamento: {result['error']}")
            
            # Limpar arquivo de teste
            os.remove(export_file)
            print(f"üóëÔ∏è  Arquivo de teste removido: {export_file}")
        
    else:
        print("‚ùå Falha na exporta√ß√£o")


def main():
    """Fun√ß√£o principal que executa todos os demos."""
    print("üéØ EDA AI MINDS - SISTEMA DE CARREGAMENTO DE DADOS")
    print("=" * 80)
    print("Este demo mostra como carregar e processar dados CSV de forma inteligente.")
    print("=" * 80)
    
    try:
        # Executar demos sequencialmente
        processor1 = demo_basic_usage()
        processor2 = demo_advanced_features()
        processor3 = demo_multiple_sources()
        demo_export_capabilities()
        
        print("\n" + "=" * 80)
        print("‚úÖ TODOS OS DEMOS CONCLU√çDOS COM SUCESSO!")
        print("=" * 80)
        
        # Resumo final
        print(f"\nüìä Resumo Final:")
        print(f"‚Ä¢ Sistema de carregamento: ‚úÖ Funcionando")
        print(f"‚Ä¢ Valida√ß√£o autom√°tica: ‚úÖ Funcionando") 
        print(f"‚Ä¢ Limpeza de dados: ‚úÖ Funcionando")
        print(f"‚Ä¢ An√°lise inteligente: ‚úÖ Funcionando")
        print(f"‚Ä¢ M√∫ltiplas fontes: ‚úÖ Funcionando")
        print(f"‚Ä¢ Exporta√ß√£o: ‚úÖ Funcionando")
        
        print(f"\nüöÄ O sistema est√° pronto para carregar e analisar seus dados CSV!")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO DURANTE EXECU√á√ÉO: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    exit_code = 0 if success else 1
    exit(exit_code)