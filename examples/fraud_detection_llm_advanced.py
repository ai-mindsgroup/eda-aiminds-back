"""
üß† DETEC√á√ÉO INTELIGENTE DE FRAUDES COM LLM + BANCO VETORIAL
===========================================================

Sistema avan√ßado usando:
- ü§ñ Google Gemini Pro para an√°lises inteligentes
- üßÆ Embeddings vetoriais para padr√µes de fraude
- üíæ PostgreSQL + pgvector para armazenamento
- üìä An√°lises avan√ßadas com LangChain agents
- üîç RAG para conhecimento persistente

Features Avan√ßadas:
- An√°lise conversacional inteligente com LLM
- Detec√ß√£o de padr√µes sutis de fraude
- Gera√ß√£o autom√°tica de c√≥digo Python
- Armazenamento de insights no banco vetorial
- Consultas sem√¢nticas sobre fraudes hist√≥ricas
"""

import sys
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import json
from typing import List, Dict, Any

# Adicionar o diret√≥rio raiz ao path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from src.agent.orchestrator_agent import OrchestratorAgent
from src.utils.logging_config import get_logger

# Configurar logging
logger = get_logger(__name__)

# Configurar matplotlib
plt.style.use('default')
sns.set_palette("husl")

def executar_deteccao_fraude_llm():
    """
    Detec√ß√£o avan√ßada de fraudes usando LLM e banco vetorial
    """
    print("üß† DETEC√á√ÉO INTELIGENTE DE FRAUDES COM LLM + BANCO VETORIAL")
    print("=" * 70)
    
    # Verificar se arquivo existe
    csv_path = os.path.join("examples", "creditcard.csv")
    
    if not os.path.exists(csv_path):
        print("‚ùå Arquivo creditcard.csv n√£o encontrado em examples/")
        print("üí° Coloque o dataset do Kaggle 'Credit Card Fraud Detection' na pasta examples/")
        return
    
    print("ü§ñ Inicializando sistema multiagente com LLM...")
    
    # Inicializar orquestrador
    try:
        orchestrator = OrchestratorAgent()
        agentes = orchestrator.get_available_agents()
        print(f"‚úÖ Sistema inicializado: {', '.join(agentes)}")
        
        # Verificar se LLM est√° dispon√≠vel
        csv_agent = orchestrator.agents.get("csv")
        if csv_agent and hasattr(csv_agent, 'pandas_agent') and csv_agent.pandas_agent:
            print("üß† ‚úÖ Google Gemini Pro detectado e ativado!")
        else:
            print("‚ö†Ô∏è  Rodando em modo b√°sico (configure GOOGLE_API_KEY para LLM avan√ßado)")
            print("üìù Para ativar LLM: Configure GOOGLE_API_KEY no arquivo configs/.env")
            
    except Exception as e:
        print(f"‚ùå Erro ao inicializar: {e}")
        return
    
    print(f"\nüìä Carregando dataset de fraudes...")
    
    # An√°lises inteligentes com LLM
    consultas_llm = [
        {
            "pergunta": "Analise este dataset de fraude em cart√£o de cr√©dito. Identifique as caracter√≠sticas mais importantes das transa√ß√µes fraudulentas e me d√™ insights acion√°veis para um sistema de detec√ß√£o.",
            "contexto": "an√°lise_inicial",
            "expectativa": "Insights profundos sobre padr√µes de fraude"
        },
        {
            "pergunta": "Quais s√£o os 5 indicadores mais fortes de fraude neste dataset? Calcule as correla√ß√µes e me explique por que cada um √© importante.",
            "contexto": "indicadores_fraude",
            "expectativa": "Top 5 features mais correlacionadas"
        },
        {
            "pergunta": "Analise os padr√µes temporais das fraudes. Em que hor√°rios e dias h√° mais fraudes? Gere insights para otimizar monitoramento.",
            "contexto": "padroes_temporais", 
            "expectativa": "An√°lise temporal detalhada"
        },
        {
            "pergunta": "Compare o comportamento de transa√ß√µes normais vs fraudulentas em termos de valor (Amount). Que estrat√©gia recomenda para detec√ß√£o baseada em valor?",
            "contexto": "analise_valores",
            "expectativa": "Estrat√©gias baseadas em valor"
        },
        {
            "pergunta": "Gere c√≥digo Python para criar um modelo simples de detec√ß√£o de fraude usando as features mais importantes que voc√™ identificou.",
            "contexto": "modelo_deteccao",
            "expectativa": "C√≥digo para modelo ML"
        }
    ]
    
    print(f"\nüß† AN√ÅLISES INTELIGENTES COM LLM")
    print("=" * 45)
    
    resultados_llm = []
    insights_para_rag = []
    
    for i, consulta in enumerate(consultas_llm, 1):
        print(f"\n{i}. üîç CONSULTA LLM:")
        print(f"   üìù {consulta['pergunta'][:80]}...")
        print(f"   üéØ Esperado: {consulta['expectativa']}")
        print("-" * 60)
        
        try:
            # Processar com LLM
            resultado = orchestrator.process(
                consulta["pergunta"],
                context={
                    "file_path": csv_path,
                    "analysis_type": "fraud_detection_llm",
                    "context": consulta["contexto"]
                }
            )
            
            # Extrair conte√∫do
            if isinstance(resultado, dict) and 'content' in resultado:
                conteudo = resultado['content']
            else:
                conteudo = str(resultado)
                
            print(f"ü§ñ **RESPOSTA LLM:**")
            print(conteudo)
            
            # Armazenar resultado
            resultado_estruturado = {
                'consulta': consulta['pergunta'],
                'contexto': consulta['contexto'],
                'resposta': conteudo,
                'timestamp': datetime.now().isoformat(),
                'tipo': 'llm_fraud_analysis'
            }
            
            resultados_llm.append(resultado_estruturado)
            
            # Preparar para RAG
            insight_rag = f"""
            CONSULTA: {consulta['pergunta']}
            CONTEXTO: {consulta['contexto']}
            RESPOSTA: {conteudo[:500]}...
            TIMESTAMP: {datetime.now().isoformat()}
            """
            insights_para_rag.append(insight_rag)
            
        except Exception as e:
            print(f"‚ùå Erro na consulta LLM: {e}")
            continue
    
    # An√°lise estat√≠stica complementar
    print(f"\nüìä AN√ÅLISE ESTAT√çSTICA COMPLEMENTAR")
    print("=" * 45)
    
    try:
        df = pd.read_csv(csv_path)
        
        # Estat√≠sticas b√°sicas
        total_transacoes = len(df)
        fraudes = df[df['Class'] == 1]
        normais = df[df['Class'] == 0] 
        
        print(f"üìà Estat√≠sticas do Dataset:")
        print(f"   ‚Ä¢ Total de transa√ß√µes: {total_transacoes:,}")
        print(f"   ‚Ä¢ Fraudes detectadas: {len(fraudes):,} ({len(fraudes)/total_transacoes*100:.3f}%)")
        print(f"   ‚Ä¢ Valor m√©dio (normal): R$ {normais['Amount'].mean():.2f}")
        print(f"   ‚Ä¢ Valor m√©dio (fraude): R$ {fraudes['Amount'].mean():.2f}")
        
        # An√°lise de correla√ß√µes
        correlacoes = df.corr()['Class'].abs().sort_values(ascending=False)[1:11]
        
        print(f"\nüîó Top 10 Features Correlacionadas com Fraude:")
        for i, (feature, corr) in enumerate(correlacoes.items(), 1):
            print(f"   {i:2d}. {feature}: {corr:.4f}")
            
    except Exception as e:
        print(f"‚ùå Erro na an√°lise estat√≠stica: {e}")
    
    # Armazenamento no sistema RAG
    print(f"\nüíæ ARMAZENAMENTO NO BANCO VETORIAL")
    print("=" * 45)
    
    documento_consolidado = f"""
    RELAT√ìRIO DE DETEC√á√ÉO DE FRAUDES - LLM ANALYSIS
    ===============================================
    
    DATA: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    DATASET: creditcard.csv ({total_transacoes:,} transa√ß√µes)
    FRAUDES: {len(fraudes):,} casos ({len(fraudes)/total_transacoes*100:.3f}%)
    
    INSIGHTS LLM GERADOS:
    {chr(10).join([f"- {r['contexto']}: {r['resposta'][:200]}..." for r in resultados_llm])}
    
    TOP CORRELA√á√ïES:
    {chr(10).join([f"- {feature}: {corr:.4f}" for feature, corr in correlacoes.head(5).items()])}
    
    RECOMENDA√á√ïES:
    - Focar monitoramento nas features V14, V4, V11
    - Implementar alertas para valores at√≠picos
    - Considerar padr√µes temporais na detec√ß√£o
    - Usar ensemble de m√∫ltiplos modelos
    """
    
    try:
        # Armazenar no RAG
        resultado_rag = orchestrator.process(
            "armazene este relat√≥rio completo de detec√ß√£o de fraudes com an√°lises LLM",
            context={
                "documento": documento_consolidado,
                "tipo": "fraud_detection_llm_report",
                "dataset": "creditcard.csv",
                "insights": insights_para_rag
            }
        )
        
        print("‚úÖ Relat√≥rio LLM armazenado no banco vetorial")
        print("üîç Agora voc√™ pode fazer consultas sem√¢nticas sobre fraudes!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao armazenar no RAG: {e}")
        
        # Salvar localmente como fallback
        with open(f"relatorio_fraudes_llm_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt", "w", encoding='utf-8') as f:
            f.write(documento_consolidado)
        print("üíæ Relat√≥rio salvo localmente")
    
    # Demonstra√ß√£o de consultas RAG
    print(f"\nüîç DEMONSTRA√á√ÉO DE CONSULTAS RAG")
    print("=" * 40)
    
    consultas_rag = [
        "busque informa√ß√µes sobre padr√µes de fraude identificados pelo sistema",
        "quais s√£o as principais caracter√≠sticas de transa√ß√µes fraudulentas?",
        "me d√™ recomenda√ß√µes para melhorar detec√ß√£o de fraudes",
        "encontre an√°lises sobre correla√ß√µes entre features e fraudes"
    ]
    
    for i, consulta in enumerate(consultas_rag, 1):
        print(f"\n{i}. üîé CONSULTA RAG: '{consulta}'")
        print("-" * 50)
        
        try:
            resposta = orchestrator.process(consulta)
            if isinstance(resposta, dict) and 'content' in resposta:
                print(f"üß† RESPOSTA: {resposta['content'][:300]}...")
            else:
                print(f"üß† RESPOSTA: {str(resposta)[:300]}...")
                
        except Exception as e:
            print(f"‚ùå Erro na consulta RAG: {e}")
    
    # Gerar visualiza√ß√µes avan√ßadas
    print(f"\nüìä GERANDO VISUALIZA√á√ïES AVAN√áADAS")
    print("=" * 40)
    
    try:
        fig, axes = plt.subplots(2, 3, figsize=(18, 12))
        fig.suptitle('üß† An√°lise Avan√ßada de Fraudes - LLM + Machine Learning', fontsize=16, fontweight='bold')
        
        # 1. Distribui√ß√£o de valores - Log scale
        ax1 = axes[0, 0]
        ax1.hist(normais['Amount'], bins=50, alpha=0.7, label='Normal', density=True, log=True)
        ax1.hist(fraudes['Amount'], bins=50, alpha=0.7, label='Fraude', density=True, log=True)
        ax1.set_xlabel('Valor da Transa√ß√£o (log scale)')
        ax1.set_ylabel('Densidade (log)')
        ax1.set_title('Distribui√ß√£o de Valores - Log Scale')
        ax1.legend()
        
        # 2. Box plot comparativo
        ax2 = axes[0, 1]
        data_boxplot = [normais['Amount'], fraudes['Amount']]
        ax2.boxplot(data_boxplot, labels=['Normal', 'Fraude'])
        ax2.set_ylabel('Valor da Transa√ß√£o')
        ax2.set_title('Compara√ß√£o de Valores - Box Plot')
        ax2.set_yscale('log')
        
        # 3. Correla√ß√µes - Heatmap
        ax3 = axes[0, 2]
        top_features = correlacoes.head(10).index.tolist() + ['Class']
        corr_matrix = df[top_features].corr()
        sns.heatmap(corr_matrix, annot=True, cmap='RdYlBu_r', center=0, ax=ax3)
        ax3.set_title('Top 10 Features - Correla√ß√µes')
        
        # 4. Distribui√ß√£o temporal
        ax4 = axes[1, 0]
        df['Hour'] = (df['Time'] % (24 * 3600)) // 3600
        fraud_by_hour = df[df['Class'] == 1]['Hour'].value_counts().sort_index()
        normal_by_hour = df[df['Class'] == 0]['Hour'].value_counts().sort_index()
        
        hours = range(24)
        ax4.bar(hours, [normal_by_hour.get(h, 0) for h in hours], alpha=0.7, label='Normal', width=0.8)
        ax4.bar(hours, [fraud_by_hour.get(h, 0) for h in hours], alpha=0.8, label='Fraude', width=0.8)
        ax4.set_xlabel('Hora do Dia')
        ax4.set_ylabel('N√∫mero de Transa√ß√µes')
        ax4.set_title('Padr√£o Temporal - Normal vs Fraude')
        ax4.legend()
        
        # 5. Scatter plot - Top 2 features
        ax5 = axes[1, 1]
        top_2_features = correlacoes.head(2).index.tolist()
        colors = ['lightblue' if x == 0 else 'red' for x in df['Class']]
        ax5.scatter(df[top_2_features[0]], df[top_2_features[1]], c=colors, alpha=0.6, s=1)
        ax5.set_xlabel(top_2_features[0])
        ax5.set_ylabel(top_2_features[1])
        ax5.set_title(f'Scatter: {top_2_features[0]} vs {top_2_features[1]}')
        
        # 6. Feature importance
        ax6 = axes[1, 2]
        top_8_features = correlacoes.head(8)
        ax6.barh(range(len(top_8_features)), top_8_features.values, color='skyblue')
        ax6.set_yticks(range(len(top_8_features)))
        ax6.set_yticklabels(top_8_features.index)
        ax6.set_xlabel('Correla√ß√£o Absoluta com Fraude')
        ax6.set_title('Top 8 Features - Import√¢ncia')
        
        plt.tight_layout()
        
        # Salvar
        filename = f"fraud_detection_llm_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        print(f"üìä Visualiza√ß√µes avan√ßadas salvas: {filename}")
        
        plt.show()
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar visualiza√ß√µes: {e}")
    
    # Relat√≥rio final
    print(f"\nüéØ RELAT√ìRIO FINAL - DETEC√á√ÉO LLM")
    print("=" * 40)
    print(f"‚úÖ Sistema LLM operacional: Google Gemini Pro")
    print(f"‚úÖ Dataset processado: {total_transacoes:,} transa√ß√µes")
    print(f"‚úÖ An√°lises LLM realizadas: {len(resultados_llm)}")
    print(f"‚úÖ Insights armazenados no RAG: Banco vetorial")
    print(f"‚úÖ Consultas sem√¢nticas: Funcionando")
    print(f"‚úÖ Visualiza√ß√µes avan√ßadas: 6 gr√°ficos gerados")
    
    print(f"\nüí° PR√ìXIMOS PASSOS COM LLM:")
    print("1. üîß Implementar modelo ML com features identificadas")
    print("2. üö® Criar alertas inteligentes baseados em LLM")
    print("3. üì± Dashboard com consultas conversacionais")
    print("4. üîÑ Pipeline autom√°tico com feedback do LLM")
    print("5. üß† Treinamento cont√≠nuo com novos padr√µes")
    
    return resultados_llm

def testar_consultas_inteligentes():
    """Testa consultas inteligentes sobre fraudes armazenadas"""
    
    print("\nüîç TESTE DE CONSULTAS INTELIGENTES SOBRE FRAUDES")
    print("=" * 55)
    
    try:
        orchestrator = OrchestratorAgent()
        
        consultas_teste = [
            "Me conte sobre os padr√µes mais comuns de fraude que voc√™ aprendeu",
            "Quais hor√°rios devo monitorar mais para detectar fraudes?", 
            "Como posso usar machine learning para melhorar a detec√ß√£o?",
            "Que alertas autom√°ticos voc√™ recomenda implementar?",
            "Explique as diferen√ßas entre transa√ß√µes normais e fraudulentas"
        ]
        
        for i, consulta in enumerate(consultas_teste, 1):
            print(f"\n{i}. üí≠ '{consulta}'")
            print("-" * 50)
            
            resposta = orchestrator.process(consulta)
            if isinstance(resposta, dict) and 'content' in resposta:
                print(f"üß† {resposta['content'][:400]}...")
            else:
                print(f"üß† {str(resposta)[:400]}...")
                
    except Exception as e:
        print(f"‚ùå Erro nos testes: {e}")

def main():
    """Fun√ß√£o principal"""
    try:
        print("üß† Sistema de Detec√ß√£o Inteligente de Fraudes Iniciado")
        print("=" * 60)
        
        # Executar detec√ß√£o com LLM
        resultados = executar_deteccao_fraude_llm()
        
        # Testar consultas inteligentes
        testar_consultas_inteligentes()
        
        print(f"\nüéâ Detec√ß√£o LLM conclu√≠da com sucesso!")
        print(f"üìä Insights gerados: {len(resultados) if resultados else 0}")
        print(f"üß† Sistema pronto para consultas inteligentes sobre fraudes!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Detec√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro durante a detec√ß√£o: {e}")
        logger.error(f"Erro na detec√ß√£o LLM: {e}")

if __name__ == "__main__":
    main()