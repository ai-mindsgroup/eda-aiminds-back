"""Servi√ßo de Ingest√£o Autom√°tica de CSV do Google Drive.

Este servi√ßo orquestra todo o fluxo de ingest√£o autom√°tica:
1. Monitora pasta do Google Drive (polling)
2. Baixa novos arquivos CSV
3. Move para pasta 'processando'
4. Dispara fluxo de ingest√£o (DataIngestor)
5. Move para pasta 'processado' ap√≥s sucesso
6. Atualiza refer√™ncias para RAG agents

Funcionalidades:
- Polling configur√°vel
- Tratamento robusto de erros
- Logging detalhado
- Retry em caso de falhas
- Limpeza autom√°tica de arquivos antigos

‚ö†Ô∏è COMPATIBILIDADE (2025-10-10):
Usa DataIngestor para manter a mesma l√≥gica do interface_interativa.py:
- Limpa base vetorial antes da ingest√£o
- Gera an√°lise estat√≠stica do CSV (2 chunks)
- Metadata simples: {'source': caminho_arquivo}
- Mesma qualidade/resultado que interface_interativa.py
"""
from __future__ import annotations

import time
import signal
import sys
from pathlib import Path
from typing import Optional
from datetime import datetime
import logging

from src.integrations.google_drive_client import (
    GoogleDriveClient,
    GoogleDriveClientError,
    create_google_drive_client,
    GOOGLE_DRIVE_AVAILABLE
)
from src.data.csv_file_manager import CSVFileManager, CSVFileManagerError, create_csv_file_manager
from src.agent.data_ingestor import DataIngestor
from src.embeddings.generator import EmbeddingProvider
from src.settings import (
    AUTO_INGEST_POLLING_INTERVAL,
    GOOGLE_DRIVE_ENABLED,
    GOOGLE_DRIVE_FOLDER_ID,
    GOOGLE_DRIVE_PROCESSED_FOLDER_ID,
    GOOGLE_DRIVE_POST_PROCESS_ACTION,
    EDA_DATA_DIR,
    EDA_DATA_DIR_PROCESSADO
)

logger = logging.getLogger("eda.auto_ingest_service")


class AutoIngestServiceError(Exception):
    """Exce√ß√£o base para erros do servi√ßo de ingest√£o autom√°tica."""
    pass


class AutoIngestService:
    """Servi√ßo principal de ingest√£o autom√°tica de CSV.
    
    Responsabilidades:
    - Coordenar Google Drive client, File Manager e Data Ingestor
    - Implementar loop de polling
    - Gerenciar erros e retries
    - Fornecer interface de controle (start/stop)
    
    ‚ö†Ô∏è COMPATIBILIDADE: Usa DataIngestor para manter mesma l√≥gica do interface_interativa.py
    """
    
    def __init__(
        self,
        google_drive_client: Optional[GoogleDriveClient] = None,
        file_manager: Optional[CSVFileManager] = None,
        data_ingestor: Optional[DataIngestor] = None,
        polling_interval: Optional[int] = None
    ):
        """Inicializa o servi√ßo de ingest√£o autom√°tica.
        
        Args:
            google_drive_client: Cliente Google Drive (criado automaticamente se None)
            file_manager: Gerenciador de arquivos CSV
            data_ingestor: Ingestor de dados (mesma l√≥gica do interface_interativa.py)
            polling_interval: Intervalo entre verifica√ß√µes (segundos)
        """
        self.polling_interval = polling_interval or AUTO_INGEST_POLLING_INTERVAL
        self.running = False
        self._stop_requested = False
        
        # Componentes
        self.google_drive_client = google_drive_client
        self.google_drive_processed_folder_id = None  # ID da pasta "processados" no Drive
        self.file_manager = file_manager or create_csv_file_manager()
        
        # ‚úÖ COMPATIBILIDADE: Usa DataIngestor (mesma l√≥gica do interface_interativa.py)
        self.data_ingestor = data_ingestor or DataIngestor()
        
        # Estat√≠sticas
        self.stats = {
            "total_files_processed": 0,
            "total_files_failed": 0,
            "last_check": None,
            "last_success": None,
            "last_error": None,
            "uptime_start": None
        }
        
        logger.info("Auto Ingest Service inicializado")
        logger.info(f"  Polling interval: {self.polling_interval}s")
        logger.info(f"  Google Drive enabled: {GOOGLE_DRIVE_ENABLED}")
        logger.info(f"  Google Drive available: {GOOGLE_DRIVE_AVAILABLE}")
        logger.info(f"  ‚úÖ Usando DataIngestor (compatibilidade interface_interativa.py)")
        
        # Configura tratamento de sinais para shutdown gracioso
        self._setup_signal_handlers()
    
    def _setup_signal_handlers(self) -> None:
        """Configura handlers para sinais de interrup√ß√£o."""
        def signal_handler(sig, frame):
            logger.info(f"\nüõë Sinal {sig} recebido. Encerrando servi√ßo...")
            self.stop()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def _initialize_google_drive(self) -> bool:
        """Inicializa e autentica com Google Drive.
        
        Returns:
            True se sucesso, False caso contr√°rio
        """
        if not GOOGLE_DRIVE_ENABLED:
            logger.warning("Google Drive est√° desabilitado (GOOGLE_DRIVE_ENABLED=false)")
            return False
        
        if not GOOGLE_DRIVE_AVAILABLE:
            logger.error("Bibliotecas do Google Drive n√£o instaladas")
            logger.error("Execute: pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client")
            return False
        
        try:
            if not self.google_drive_client:
                logger.info("Criando e autenticando cliente Google Drive...")
                self.google_drive_client = create_google_drive_client()
                logger.info("‚úÖ Cliente Google Drive autenticado com sucesso")
            
            # Configura pasta "processados" se usar a√ß√£o "move"
            if GOOGLE_DRIVE_POST_PROCESS_ACTION == "move":
                self._setup_processed_folder()
            
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar Google Drive: {e}")
            return False
    
    def _setup_processed_folder(self) -> None:
        """Configura pasta 'processados' no Google Drive."""
        try:
            # Usa ID fornecido ou cria/encontra pasta automaticamente
            if GOOGLE_DRIVE_PROCESSED_FOLDER_ID:
                self.google_drive_processed_folder_id = GOOGLE_DRIVE_PROCESSED_FOLDER_ID
                logger.info(f"üìÅ Pasta processados configurada: {self.google_drive_processed_folder_id}")
            else:
                # Cria/encontra pasta "processados" dentro da pasta monitorada
                folder_name = "processados"
                logger.info(f"üìÅ Procurando/criando pasta '{folder_name}'...")
                self.google_drive_processed_folder_id = self.google_drive_client.get_or_create_folder(
                    folder_name=folder_name,
                    parent_folder_id=GOOGLE_DRIVE_FOLDER_ID
                )
                logger.info(f"‚úÖ Pasta processados pronta: {self.google_drive_processed_folder_id}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao configurar pasta processados: {e}")
            logger.warning(f"   Arquivos ser√£o deletados em vez de movidos")
    
    def _process_file(self, file_path: Path) -> bool:
        """Processa um √∫nico arquivo CSV.
        
        Args:
            file_path: Caminho do arquivo a processar
        
        Returns:
            True se processado com sucesso, False caso contr√°rio
        """
        try:
            logger.info(f"üìÑ Processando arquivo: {file_path.name}")
            # 1. Move para pasta 'processando'
            logger.info("  ‚Üí Movendo para pasta 'processando'...")
            processing_path = self.file_manager.move_to_processing(file_path)
            # 2. Executa fluxo at√¥mico de ingest√£o
            logger.info("  ‚Üí Executando fluxo at√¥mico de ingest√£o...")
            from src.vectorstore.supabase_client import supabase
            from src.embeddings.vector_store import VectorStore
            from src.agent.data_ingestor import atomic_ingestion_and_query
            vector_store = VectorStore()
            atomic_ingestion_and_query(str(processing_path), supabase, vector_store)
            logger.info("  ‚úÖ Fluxo at√¥mico de ingest√£o conclu√≠do com sucesso")
            # 3. Move para pasta 'processado'
            logger.info("  ‚Üí Movendo para pasta 'processado'...")
            processed_path = self.file_manager.move_to_processed(processing_path)
            # 4. Atualiza estat√≠sticas
            self.stats["total_files_processed"] += 1
            self.stats["last_success"] = datetime.now().isoformat()
            logger.info(f"‚úÖ Arquivo processado com sucesso: {file_path.name}")
            logger.info(f"   Localiza√ß√£o final: {processed_path}")
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar arquivo {file_path.name}: {e}")
            self.stats["total_files_failed"] += 1
            self.stats["last_error"] = str(e)
            return False

    def _check_and_process_new_files(self) -> int:
        """Verifica o Google Drive por novos CSVs e processa cada um.

        Retorna o n√∫mero de arquivos processados neste ciclo.
        """
        files_processed = 0
        try:
            logger.debug("Verificando novos arquivos no Google Drive...")
            if not self.google_drive_client:
                logger.debug("Google Drive client n√£o inicializado")
                return 0

            csv_files = self.google_drive_client.list_csv_files(only_new=True)
            if not csv_files:
                logger.debug("Nenhum arquivo novo encontrado")
                return 0

            logger.info(f"üì• Encontrados {len(csv_files)} novos arquivos CSV")

            for file_info in csv_files:
                file_id = file_info['id']
                file_name = file_info['name']
                try:
                    logger.info(f"  ‚¨áÔ∏è Baixando: {file_name}")
                    from src.settings import EDA_DATA_DIR_PROCESSANDO
                    download_path = EDA_DATA_DIR_PROCESSANDO / file_name
                    download_path.parent.mkdir(parents=True, exist_ok=True)
                    self.google_drive_client.download_file(file_id, download_path)
                    logger.info(f"  ‚úÖ Arquivo baixado para: {download_path}")

                    # Processa usando o fluxo at√¥mico (clean + ingest + refresh)
                    logger.info(f"  üîÑ Iniciando processamento (fluxo at√¥mico)...")
                    from src.vectorstore.supabase_client import supabase
                    from src.embeddings.vector_store import VectorStore
                    from src.agent.data_ingestor import atomic_ingestion_and_query
                    vector_store = VectorStore()
                    atomic_ingestion_and_query(str(download_path), supabase, vector_store)

                    # Move para processado
                    processed_path = self.file_manager.move_to_processed(download_path)
                    files_processed += 1
                    self.stats["total_files_processed"] += 1
                    self.stats["last_success"] = datetime.now().isoformat()

                    # P√≥s-processamento no Drive (move ou delete)
                    try:
                        if GOOGLE_DRIVE_POST_PROCESS_ACTION == "move" and self.google_drive_processed_folder_id:
                            logger.info(f"  üì¶ Movendo arquivo no Google Drive: {file_name} (ID: {file_id})")
                            self.google_drive_client.move_file(file_id, self.google_drive_processed_folder_id)
                            logger.info(f"  ‚úÖ Arquivo movido para pasta 'processados' no Google Drive")
                        else:
                            logger.info(f"  üóëÔ∏è Removendo arquivo do Google Drive: {file_name} (ID: {file_id})")
                            self.google_drive_client.delete_file(file_id)
                            logger.info(f"  ‚úÖ Arquivo removido do Google Drive com sucesso")
                        logger.info(f"  üìã Arquivo local salvo em: {processed_path}")
                    except Exception as del_error:
                        logger.error(f"  ‚ö†Ô∏è Erro ao finalizar arquivo no Drive: {del_error}")
                        logger.warning(f"  ‚ö†Ô∏è O arquivo permanecer√° no Google Drive e pode ser reprocessado")

                except Exception as e:
                    logger.error(f"‚ùå Erro ao processar {file_name}: {e}")
                    self.stats["total_files_failed"] += 1
                    self.stats["last_error"] = str(e)
                    # Tentativa de fallback: se o arquivo local foi baixado, tentar fluxo at√¥mico
                    try:
                        if 'download_path' in locals() and download_path.exists():
                            from src.vectorstore.supabase_client import supabase
                            from src.embeddings.vector_store import VectorStore
                            from src.agent.data_ingestor import atomic_ingestion_and_query
                            vector_store = VectorStore()
                            atomic_ingestion_and_query(str(download_path), supabase, vector_store)
                            logger.info("  ‚úÖ Fluxo at√¥mico de ingest√£o (fallback) conclu√≠do com sucesso")
                    except Exception as fallback_err:
                        logger.error(f"  ‚ö†Ô∏è Fallback de ingest√£o falhou: {fallback_err}")

        except Exception as e:
            logger.error(f"Erro ao verificar/processar arquivos do Drive: {e}")

        return files_processed

    def _check_local_files(self) -> int:
        """Verifica arquivos locais em `data/` e processa aqueles encontrados.

        Retorna o n√∫mero de arquivos processados.
        """
        files_processed = 0
        try:
            local_files = self.file_manager.list_files_in_data()
            if not local_files:
                return 0

            logger.info(f"üìÇ Encontrados {len(local_files)} arquivos locais para processar")
            for file_path in local_files:
                if self._process_file(file_path):
                    files_processed += 1

            return files_processed
        except Exception as e:
            logger.error(f"Erro ao verificar arquivos locais: {e}")
            return files_processed
            
            return files_processed
            
        except Exception as e:
            logger.error(f"Erro ao verificar arquivos locais: {e}")
            return files_processed
    
    def _polling_cycle(self) -> None:
        """Executa um ciclo de verifica√ß√£o e processamento."""
        try:
            self.stats["last_check"] = datetime.now().isoformat()
            
            logger.info(f"üîç Iniciando ciclo de verifica√ß√£o ({datetime.now().strftime('%H:%M:%S')})")
            
            total_processed = 0
            
            # 1. Verifica arquivos locais (colocados manualmente)
            local_processed = self._check_local_files()
            total_processed += local_processed
            
            # 2. Verifica Google Drive (se habilitado)
            if GOOGLE_DRIVE_ENABLED and self.google_drive_client:
                drive_processed = self._check_and_process_new_files()
                total_processed += drive_processed
            
            # 3. Limpeza de arquivos antigos (a cada 10 ciclos)
            if self.stats["total_files_processed"] % 10 == 0:
                logger.debug("üßπ Executando limpeza de arquivos antigos...")
                removed = self.file_manager.clean_old_processed_files(days_old=30)
                if removed > 0:
                    logger.info(f"  üóëÔ∏è Removidos {removed} arquivos antigos")
            
            if total_processed > 0:
                logger.info(f"‚úÖ Ciclo conclu√≠do: {total_processed} arquivos processados")
            else:
                logger.debug("Ciclo conclu√≠do: nenhum arquivo novo")
            
        except Exception as e:
            logger.error(f"Erro no ciclo de polling: {e}")
    
    def start(self) -> None:
        """Inicia o servi√ßo de ingest√£o autom√°tica (loop de polling)."""
        if self.running:
            logger.warning("Servi√ßo j√° est√° em execu√ß√£o")
            return
        
        logger.info("=" * 70)
        logger.info("üöÄ INICIANDO SERVI√áO DE INGEST√ÉO AUTOM√ÅTICA")
        logger.info("=" * 70)
        
        # Inicializa Google Drive se habilitado
        if GOOGLE_DRIVE_ENABLED:
            if not self._initialize_google_drive():
                logger.warning("‚ö†Ô∏è Google Drive n√£o dispon√≠vel - apenas arquivos locais ser√£o processados")
        
        self.running = True
        self.stats["uptime_start"] = datetime.now().isoformat()
        
        logger.info(f"‚úÖ Servi√ßo iniciado com sucesso")
        logger.info(f"‚è∞ Intervalo de polling: {self.polling_interval}s")
        logger.info(f"üìÅ Diret√≥rio de dados: {EDA_DATA_DIR}")
        logger.info(f"üìä Diret√≥rio processado: {EDA_DATA_DIR_PROCESSADO}")
        logger.info("=" * 70)
        logger.info("üí° Pressione Ctrl+C para encerrar")
        logger.info("=" * 70)
        
        # Loop principal
        try:
            while self.running and not self._stop_requested:
                self._polling_cycle()
                
                # Aguarda pr√≥ximo ciclo
                logger.debug(f"‚è≥ Aguardando {self.polling_interval}s at√© pr√≥xima verifica√ß√£o...")
                time.sleep(self.polling_interval)
        
        except KeyboardInterrupt:
            logger.info("\nüõë Interrup√ß√£o recebida via teclado")
        except Exception as e:
            logger.error(f"‚ùå Erro fatal no servi√ßo: {e}", exc_info=True)
        finally:
            self.stop()
    
    def stop(self) -> None:
        """Para o servi√ßo de ingest√£o autom√°tica."""
        if not self.running:
            return
        
        logger.info("üõë Encerrando servi√ßo...")
        self._stop_requested = True
        self.running = False
        
        # Mostra estat√≠sticas finais
        self._print_stats()
        
        logger.info("üëã Servi√ßo encerrado")
    
    def _print_stats(self) -> None:
        """Imprime estat√≠sticas do servi√ßo."""
        logger.info("=" * 70)
        logger.info("üìä ESTAT√çSTICAS DO SERVI√áO")
        logger.info("=" * 70)
        logger.info(f"  Arquivos processados: {self.stats['total_files_processed']}")
        logger.info(f"  Arquivos com erro: {self.stats['total_files_failed']}")
        
        if self.stats['uptime_start']:
            uptime_start = datetime.fromisoformat(self.stats['uptime_start'])
            uptime = datetime.now() - uptime_start
            logger.info(f"  Tempo de execu√ß√£o: {uptime}")
        
        if self.stats['last_success']:
            logger.info(f"  √öltimo sucesso: {self.stats['last_success']}")
        
        if self.stats['last_error']:
            logger.info(f"  √öltimo erro: {self.stats['last_error']}")
        
        logger.info("=" * 70)
    
    def get_status(self) -> dict:
        """Retorna status atual do servi√ßo.
        
        Returns:
            Dicion√°rio com informa√ß√µes de status
        """
        return {
            "running": self.running,
            "polling_interval": self.polling_interval,
            "google_drive_enabled": GOOGLE_DRIVE_ENABLED,
            "google_drive_available": GOOGLE_DRIVE_AVAILABLE and self.google_drive_client is not None,
            "stats": self.stats.copy(),
            "directories": {
                "data": str(EDA_DATA_DIR),
                "processando": str(self.file_manager.processando_dir),
                "processado": str(EDA_DATA_DIR_PROCESSADO)
            }
        }


def create_auto_ingest_service() -> AutoIngestService:
    """Factory function para criar servi√ßo de ingest√£o autom√°tica.
    
    Returns:
        Inst√¢ncia de AutoIngestService
    """
    return AutoIngestService()
