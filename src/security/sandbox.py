"""
Sandbox Seguro para Execu√ß√£o de C√≥digo Python - EDA AI Minds Backend

Este m√≥dulo implementa um ambiente sandbox seguro usando RestrictedPython
para executar c√≥digo Python dinamicamente, bloqueando fun√ß√µes perigosas e
imports n√£o autorizados.

ARQUITETURA DE SEGURAN√áA:
========================

1. **RestrictedPython**: Compila c√≥digo em ambiente restrito
2. **Whitelist de Imports**: Apenas m√≥dulos seguros permitidos (pandas, numpy, math)
3. **Blacklist de Fun√ß√µes**: Fun√ß√µes perigosas bloqueadas (eval, exec, open, __import__)
4. **Timeout**: Limite de 5 segundos por execu√ß√£o
5. **Limites de Mem√≥ria**: 100MB m√°ximo
6. **Logging Completo**: Auditoria de todas as execu√ß√µes

CASOS DE USO:
============
- Execu√ß√£o de c√≥digo gerado por LLM para an√°lise de dados
- C√°lculos matem√°ticos din√¢micos
- Transforma√ß√µes de DataFrame pandas
- An√°lises estat√≠sticas customizadas

SEGURAN√áA:
=========
- ‚úÖ Bloqueia: os, subprocess, sys, socket, urllib, requests
- ‚úÖ Bloqueia: eval, exec, compile, open, __import__, globals, locals
- ‚úÖ Bloqueia: acesso a __builtins__, __file__, __name__
- ‚úÖ Permite: pandas, numpy, math, statistics, datetime
- ‚úÖ Timeout: 5 segundos (configur√°vel)
- ‚úÖ Mem√≥ria: 100MB m√°ximo (configur√°vel)

EXEMPLO DE USO:
==============
```python
from security.sandbox import execute_in_sandbox

# C√≥digo seguro - ser√° executado
result = execute_in_sandbox('''
import pandas as pd
import numpy as np

data = {'A': [1, 2, 3], 'B': [4, 5, 6]}
df = pd.DataFrame(data)
mean_A = df['A'].mean()
resultado = f"M√©dia de A: {mean_A}"
''')

print(result)
# Output: {'success': True, 'result': 'M√©dia de A: 2.0', 'execution_time_ms': 45.2}

# C√≥digo malicioso - ser√° bloqueado
result = execute_in_sandbox('''
import os
os.system('rm -rf /')  # BLOQUEADO!
''')

print(result)
# Output: {'success': False, 'error': 'ImportError: Import bloqueado: os'}
```

Autor: EDA AI Minds Team
Data: 2025-10-17
Vers√£o: 1.0.0 (Sprint 3)
"""

import logging
import time
import signal
from typing import Dict, Any, Optional, List, Set
from contextlib import contextmanager
from datetime import datetime
import traceback

# resource m√≥dulo (apenas Unix/Linux)
try:
    import resource
    RESOURCE_AVAILABLE = True
except ImportError:
    RESOURCE_AVAILABLE = False
    resource = None

# RestrictedPython para compila√ß√£o segura
try:
    from RestrictedPython import compile_restricted
    from RestrictedPython.Guards import (
        safe_builtins, 
        safe_globals, 
        guarded_iter_unpack_sequence,
        safer_getattr
    )
    from RestrictedPython.Eval import default_guarded_getitem, default_guarded_getiter
    from RestrictedPython.PrintCollector import PrintCollector
    RESTRICTED_PYTHON_AVAILABLE = True
except ImportError:
    RESTRICTED_PYTHON_AVAILABLE = False
    compile_restricted = None
    safe_builtins = {}
    safe_globals = {}
    safer_getattr = None

from utils.logging_config import get_logger


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# CONFIGURA√á√ïES DE SEGURAN√áA
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

# Imports permitidos (whitelist)
ALLOWED_IMPORTS: Set[str] = {
    'pandas',
    'numpy',
    'math',
    'statistics',
    'datetime',
    'json',
    'collections',
    'itertools',
    'functools',
    're',  # Regex (limitado)
}

# Imports bloqueados (blacklist)
BLOCKED_IMPORTS: Set[str] = {
    'os',
    'subprocess',
    'sys',
    'socket',
    'urllib',
    'requests',
    'http',
    'ftplib',
    'telnetlib',
    'pickle',  # Inseguro para deserializa√ß√£o
    'marshal',  # Inseguro
    '__builtin__',
    '__builtins__',
    'builtins',
    'importlib',
}

# Fun√ß√µes perigosas bloqueadas
BLOCKED_FUNCTIONS: Set[str] = {
    'eval',
    'exec',
    'compile',
    'open',
    '__import__',
    'globals',
    'locals',
    'vars',
    'dir',
    'getattr',
    'setattr',
    'delattr',
    'hasattr',
    'input',
    'raw_input',
}

# Limites de recursos
DEFAULT_TIMEOUT_SECONDS = 5
DEFAULT_MEMORY_LIMIT_MB = 100
DEFAULT_CPU_TIME_SECONDS = 10


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# EXCE√á√ïES CUSTOMIZADAS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

class SandboxExecutionError(Exception):
    """Erro durante execu√ß√£o no sandbox."""
    pass


class SandboxTimeoutError(SandboxExecutionError):
    """Timeout durante execu√ß√£o."""
    pass


class SandboxMemoryError(SandboxExecutionError):
    """Limite de mem√≥ria excedido."""
    pass


class SandboxImportError(SandboxExecutionError):
    """Import bloqueado por seguran√ßa."""
    pass


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TIMEOUT HANDLER
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

class TimeoutException(Exception):
    """Exce√ß√£o de timeout."""
    pass


def timeout_handler(signum, frame):
    """Handler para timeout de execu√ß√£o."""
    raise TimeoutException("Execu√ß√£o excedeu o tempo limite")


@contextmanager
def execution_timeout(seconds: int):
    """
    Context manager para timeout de execu√ß√£o.
    
    Args:
        seconds: Tempo limite em segundos
    """
    # Configurar timeout via signal (apenas Unix/Linux)
    try:
        old_handler = signal.signal(signal.SIGALRM, timeout_handler)
        signal.alarm(seconds)
        try:
            yield
        finally:
            signal.alarm(0)
            signal.signal(signal.SIGALRM, old_handler)
    except AttributeError:
        # Windows n√£o suporta signal.SIGALRM, usar thread alternativo
        # TODO: Implementar timeout com threading para Windows
        yield


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# IMPORT GUARD
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def safe_import(name: str, *args, **kwargs):
    """
    Fun√ß√£o __import__ segura que verifica whitelist/blacklist.
    
    Args:
        name: Nome do m√≥dulo a importar
        
    Raises:
        SandboxImportError: Se import n√£o autorizado
    """
    logger = get_logger(__name__)
    
    # Verificar blacklist primeiro
    if name in BLOCKED_IMPORTS or name.split('.')[0] in BLOCKED_IMPORTS:
        logger.warning(f"üö® Tentativa de import bloqueado: {name}")
        raise SandboxImportError(f"Import bloqueado por seguran√ßa: {name}")
    
    # Verificar whitelist
    base_module = name.split('.')[0]
    if base_module not in ALLOWED_IMPORTS:
        logger.warning(f"‚ö†Ô∏è Import n√£o autorizado: {name}")
        raise SandboxImportError(f"Import n√£o autorizado (n√£o est√° na whitelist): {name}")
    
    # Import permitido
    logger.debug(f"‚úÖ Import permitido: {name}")
    return __import__(name, *args, **kwargs)


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# SAFE GLOBALS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def build_safe_globals() -> Dict[str, Any]:
    """
    Constr√≥i ambiente global seguro para execu√ß√£o.
    
    Returns:
        Dict com builtins seguros e imports permitidos
    """
    safe_env = {
        '__builtins__': {
            # Fun√ß√µes b√°sicas permitidas
            'abs': abs,
            'all': all,
            'any': any,
            'bool': bool,
            'dict': dict,
            'enumerate': enumerate,
            'filter': filter,
            'float': float,
            'int': int,
            'isinstance': isinstance,
            'len': len,
            'list': list,
            'map': map,
            'max': max,
            'min': min,
            'print': print,
            'range': range,
            'reversed': reversed,
            'round': round,
            'set': set,
            'sorted': sorted,
            'str': str,
            'sum': sum,
            'tuple': tuple,
            'type': type,
            'zip': zip,
            
            # RestrictedPython guards
            '_getitem_': default_guarded_getitem,
            '_getiter_': default_guarded_getiter,
            '_iter_unpack_sequence_': guarded_iter_unpack_sequence,
            '_getattr_': safer_getattr,
            '_print_': PrintCollector,
            '_inplacevar_': lambda op, x, y: op(x, y),  # Para operadores in-place (+=, -=, etc)
            
            # Import seguro
            '__import__': safe_import,
        },
        
        # Vari√°veis especiais bloqueadas
        '__name__': 'restricted_module',
        '__file__': '<sandbox>',
        '__doc__': None,
    }
    
    return safe_env


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUN√á√ÉO PRINCIPAL: execute_in_sandbox
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def execute_in_sandbox(
    code: str,
    timeout_seconds: int = DEFAULT_TIMEOUT_SECONDS,
    memory_limit_mb: int = DEFAULT_MEMORY_LIMIT_MB,
    allowed_imports: Optional[List[str]] = None,
    return_variable: str = 'resultado'
) -> Dict[str, Any]:
    """
    Executa c√≥digo Python em ambiente sandbox seguro.
    
    Args:
        code: C√≥digo Python a ser executado
        timeout_seconds: Tempo limite de execu√ß√£o em segundos (padr√£o: 5)
        memory_limit_mb: Limite de mem√≥ria em MB (padr√£o: 100)
        allowed_imports: Lista customizada de imports permitidos (opcional)
        return_variable: Nome da vari√°vel a retornar como resultado (padr√£o: 'resultado')
        
    Returns:
        Dict com:
            - success (bool): Se execu√ß√£o foi bem-sucedida
            - result (Any): Resultado da execu√ß√£o (valor da vari√°vel 'resultado')
            - execution_time_ms (float): Tempo de execu√ß√£o em milissegundos
            - error (str): Mensagem de erro (se success=False)
            - error_type (str): Tipo do erro (se success=False)
            - logs (List[str]): Logs da execu√ß√£o
            
    Raises:
        ValueError: Se RestrictedPython n√£o estiver dispon√≠vel
        
    Exemplo:
        >>> result = execute_in_sandbox('''
        ... import pandas as pd
        ... df = pd.DataFrame({'A': [1, 2, 3]})
        ... resultado = df['A'].mean()
        ... ''')
        >>> print(result['result'])  # 2.0
    """
    logger = get_logger(__name__)
    
    # Verificar se RestrictedPython est√° dispon√≠vel
    if not RESTRICTED_PYTHON_AVAILABLE:
        error_msg = "RestrictedPython n√£o est√° instalado. Execute: pip install RestrictedPython"
        logger.error(error_msg)
        return {
            'success': False,
            'result': None,
            'execution_time_ms': 0,
            'error': error_msg,
            'error_type': 'DependencyError',
            'logs': [error_msg]
        }
    
    # Atualizar whitelist se customizada
    global ALLOWED_IMPORTS
    if allowed_imports:
        ALLOWED_IMPORTS.update(allowed_imports)
    
    # Inicializar resultado
    start_time = time.time()
    execution_logs = []
    
    try:
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # 1. COMPILAR C√ìDIGO EM MODO RESTRITO
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        logger.info("üîí Compilando c√≥digo em modo restrito...")
        execution_logs.append("Iniciando compila√ß√£o RestrictedPython")
        
        try:
            byte_code = compile_restricted(
                code,
                filename='<sandbox>',
                mode='exec'
            )
        except SyntaxError as e:
            # RestrictedPython lan√ßa SyntaxError para c√≥digo restrito
            error_msg = str(e)
            logger.error(f"‚ùå Erro de compila√ß√£o (c√≥digo restrito): {error_msg}")
            execution_logs.append(f"Erro de compila√ß√£o: {error_msg}")
            return {
                'success': False,
                'result': None,
                'execution_time_ms': (time.time() - start_time) * 1000,
                'error': error_msg,
                'error_type': 'CompilationError',
                'logs': execution_logs
            }
        
        # compile_restricted retorna objeto 'code' diretamente quando sucesso
        # ou lan√ßa SyntaxError quando falha
        execution_logs.append("‚úÖ Compila√ß√£o bem-sucedida")
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # 2. PREPARAR AMBIENTE DE EXECU√á√ÉO
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        logger.debug("üîß Preparando ambiente de execu√ß√£o...")
        safe_env = build_safe_globals()
        
        # Namespace local para vari√°veis do c√≥digo
        local_namespace = {}
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # 3. CONFIGURAR LIMITES DE RECURSOS
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # TODO: Implementar limites de mem√≥ria (requer cgroups no Linux)
        # Por enquanto, apenas logging
        logger.debug(f"‚öôÔ∏è Limites: timeout={timeout_seconds}s, memory={memory_limit_mb}MB")
        execution_logs.append(f"Limites configurados: {timeout_seconds}s, {memory_limit_mb}MB")
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # 4. EXECUTAR C√ìDIGO COM TIMEOUT
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        logger.info("‚ñ∂Ô∏è Executando c√≥digo no sandbox...")
        execution_logs.append("Iniciando execu√ß√£o")
        
        try:
            with execution_timeout(timeout_seconds):
                exec(byte_code, safe_env, local_namespace)
        except TimeoutException:
            error_msg = f"Execu√ß√£o excedeu o timeout de {timeout_seconds}s"
            logger.error(f"‚è±Ô∏è {error_msg}")
            execution_logs.append(f"TIMEOUT: {error_msg}")
            return {
                'success': False,
                'result': None,
                'execution_time_ms': (time.time() - start_time) * 1000,
                'error': error_msg,
                'error_type': 'TimeoutError',
                'logs': execution_logs
            }
        
        execution_logs.append("‚úÖ Execu√ß√£o conclu√≠da")
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # 5. EXTRAIR RESULTADO
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        result_value = local_namespace.get(return_variable)
        
        if result_value is None:
            logger.warning(f"‚ö†Ô∏è Vari√°vel '{return_variable}' n√£o encontrada no namespace")
            execution_logs.append(f"Aviso: Vari√°vel '{return_variable}' n√£o definida")
            # Retornar todo o namespace como fallback
            result_value = {k: v for k, v in local_namespace.items() 
                           if not k.startswith('_')}
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # 6. RETORNAR SUCESSO
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        execution_time_ms = (time.time() - start_time) * 1000
        
        logger.info(f"‚úÖ Sandbox executado com sucesso em {execution_time_ms:.2f}ms")
        execution_logs.append(f"Sucesso em {execution_time_ms:.2f}ms")
        
        return {
            'success': True,
            'result': result_value,
            'execution_time_ms': execution_time_ms,
            'error': None,
            'error_type': None,
            'logs': execution_logs
        }
        
    except SandboxImportError as e:
        # Import bloqueado
        error_msg = str(e)
        logger.error(f"üö® Import bloqueado: {error_msg}")
        execution_logs.append(f"ERRO DE SEGURAN√áA: {error_msg}")
        return {
            'success': False,
            'result': None,
            'execution_time_ms': (time.time() - start_time) * 1000,
            'error': error_msg,
            'error_type': 'ImportError',
            'logs': execution_logs
        }
        
    except Exception as e:
        # Erro gen√©rico
        error_msg = f"{type(e).__name__}: {str(e)}"
        error_trace = traceback.format_exc()
        logger.error(f"‚ùå Erro durante execu√ß√£o: {error_msg}\n{error_trace}")
        execution_logs.append(f"ERRO: {error_msg}")
        
        return {
            'success': False,
            'result': None,
            'execution_time_ms': (time.time() - start_time) * 1000,
            'error': error_msg,
            'error_type': type(e).__name__,
            'logs': execution_logs,
            'traceback': error_trace
        }


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUN√á√ïES AUXILIARES
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def validate_code_safety(code: str) -> Dict[str, Any]:
    """
    Valida se c√≥digo √© seguro antes de executar (an√°lise est√°tica).
    
    Args:
        code: C√≥digo Python a validar
        
    Returns:
        Dict com:
            - is_safe (bool): Se c√≥digo parece seguro
            - warnings (List[str]): Avisos de seguran√ßa
            - blocked_patterns (List[str]): Padr√µes perigosos detectados
    """
    warnings = []
    blocked_patterns = []
    
    # Verificar imports bloqueados
    for blocked in BLOCKED_IMPORTS:
        if f'import {blocked}' in code or f'from {blocked}' in code:
            blocked_patterns.append(f"Import bloqueado: {blocked}")
    
    # Verificar fun√ß√µes perigosas
    for func in BLOCKED_FUNCTIONS:
        if f'{func}(' in code:
            blocked_patterns.append(f"Fun√ß√£o perigosa: {func}()")
    
    # Verificar padr√µes suspeitos
    suspicious_patterns = ['__', 'exec(', 'eval(', 'compile(', 'open(']
    for pattern in suspicious_patterns:
        if pattern in code:
            warnings.append(f"Padr√£o suspeito detectado: {pattern}")
    
    is_safe = len(blocked_patterns) == 0
    
    return {
        'is_safe': is_safe,
        'warnings': warnings,
        'blocked_patterns': blocked_patterns
    }


def get_sandbox_info() -> Dict[str, Any]:
    """
    Retorna informa√ß√µes sobre configura√ß√£o do sandbox.
    
    Returns:
        Dict com configura√ß√µes e status do sandbox
    """
    return {
        'restricted_python_available': RESTRICTED_PYTHON_AVAILABLE,
        'allowed_imports': sorted(list(ALLOWED_IMPORTS)),
        'blocked_imports': sorted(list(BLOCKED_IMPORTS)),
        'blocked_functions': sorted(list(BLOCKED_FUNCTIONS)),
        'default_timeout_seconds': DEFAULT_TIMEOUT_SECONDS,
        'default_memory_limit_mb': DEFAULT_MEMORY_LIMIT_MB,
        'version': '1.0.0'
    }
