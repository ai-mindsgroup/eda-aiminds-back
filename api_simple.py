#!/usr/bin/env python3
"""
API Simples - Sem depend√™ncias do Supabase
==========================================

FastAPI b√°sica para demonstra√ß√£o, sem conectar ao sistema multiagente.
"""

from fastapi import FastAPI, HTTPException, UploadFile, File, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import uvicorn
import sys
import io
import pandas as pd
from datetime import datetime
from typing import Dict, Any, List, Optional

# Configura√ß√µes de limites
MAX_FILE_SIZE = 100 * 1024 * 1024  # 100MB
MAX_REQUEST_SIZE = 100 * 1024 * 1024  # 100MB

# Modelos Pydantic b√°sicos
class HealthResponse(BaseModel):
    status: str
    timestamp: str
    version: str = "1.0.0"
    message: str = "API rodando com sucesso!"
    mode: str = "production"  # Para indicar que n√£o √© demo

class ChatRequest(BaseModel):
    message: str
    session_id: Optional[str] = "default"

class ChatResponse(BaseModel):
    response: str
    session_id: str
    timestamp: str

class APIInfo(BaseModel):
    title: str = "EDA AI Minds - API REST"
    version: str = "1.0.0"
    description: str = "Sistema multiagente para an√°lise de dados CSV"
    status: str = "running"
    endpoints: List[str]

class CSVUploadResponse(BaseModel):
    file_id: str
    filename: str
    rows: int
    columns: int
    message: str
    columns_list: List[str]
    preview: Dict[str, Any]

class DashboardMetrics(BaseModel):
    total_files: int
    total_rows: int
    total_columns: int
    status: str
    timestamp: str

# Aplica√ß√£o FastAPI
app = FastAPI(
    title="EDA AI Minds API",
    description="API REST para sistema multiagente de an√°lise de dados",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    # Aumentar limites de tamanho de request
    swagger_ui_parameters={"defaultModelsExpandDepth": -1}
)

# Middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware para verificar tamanho do request
@app.middleware("http")
async def check_request_size(request: Request, call_next):
    """Middleware para verificar tamanho do request."""
    if request.method in ["POST", "PUT"]:
        content_length = request.headers.get("content-length")
        if content_length and int(content_length) > MAX_REQUEST_SIZE:
            return JSONResponse(
                status_code=413,
                content={
                    "error": "Request Too Large",
                    "message": f"Arquivo muito grande. Tamanho m√°ximo permitido: {MAX_FILE_SIZE // (1024*1024)}MB",
                    "max_size_mb": MAX_FILE_SIZE // (1024*1024),
                    "received_size_mb": int(content_length) // (1024*1024)
                }
            )
    response = await call_next(request)
    return response

# Endpoints b√°sicos
@app.get("/", response_model=APIInfo)
async def root():
    """Informa√ß√µes b√°sicas da API."""
    return APIInfo(
        endpoints=[
            "/",
            "/health",
            "/chat",
            "/docs",
            "/redoc"
        ]
    )

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """Verifica√ß√£o de sa√∫de da API."""
    return HealthResponse(
        status="healthy",
        timestamp=datetime.now().isoformat(),
        message="API funcionando perfeitamente!",
        mode="production"  # Frontend detecta como produ√ß√£o
    )

@app.post("/chat", response_model=ChatResponse)
async def chat_endpoint(request: ChatRequest):
    """Chat inteligente com respostas contextuais."""
    
    message_lower = request.message.lower()
    
    # Respostas categorizadas por tipo de pergunta
    
    # 1. Sauda√ß√µes
    if any(word in message_lower for word in ["ol√°", "oi", "ola", "hey", "hello"]):
        response_text = "üëã Ol√°! Sou o assistente da EDA AI Minds.\n\n" \
                       "Posso ajudar voc√™ com:\n" \
                       "‚Ä¢ üìä An√°lise de dados CSV\n" \
                       "‚Ä¢ üîç Detec√ß√£o de padr√µes\n" \
                       "‚Ä¢ üìà Visualiza√ß√µes e insights\n" \
                       "‚Ä¢ ü§ñ An√°lises automatizadas\n\n" \
                       "Como posso ajudar?"
    
    # 2. Ajuda / Help
    elif any(word in message_lower for word in ["help", "ajuda", "ajudar", "socorro"]):
        response_text = "üìö **Funcionalidades Dispon√≠veis:**\n\n" \
                       "**Upload de CSV:**\n" \
                       "‚Ä¢ Fa√ßa upload de arquivos CSV para an√°lise\n" \
                       "‚Ä¢ Visualize preview dos dados\n" \
                       "‚Ä¢ Obtenha estat√≠sticas autom√°ticas\n\n" \
                       "**An√°lise:**\n" \
                       "‚Ä¢ Insights autom√°ticos dos dados\n" \
                       "‚Ä¢ Detec√ß√£o de padr√µes\n" \
                       "‚Ä¢ Estat√≠sticas descritivas\n\n" \
                       "**Dashboard:**\n" \
                       "‚Ä¢ Visualize m√©tricas em tempo real\n" \
                       "‚Ä¢ Acompanhe arquivos processados\n\n" \
                       "Digite sua d√∫vida ou fa√ßa upload de um CSV para come√ßar!"
    
    # 3. Como funciona
    elif any(word in message_lower for word in ["como funciona", "funcionamento", "explicar", "explique"]):
        response_text = "üéØ **Como o Sistema Funciona:**\n\n" \
                       "1Ô∏è‚É£ **Upload**: Voc√™ envia um arquivo CSV\n" \
                       "2Ô∏è‚É£ **Processamento**: Analisamos automaticamente os dados\n" \
                       "3Ô∏è‚É£ **Insights**: Geramos estat√≠sticas e visualiza√ß√µes\n" \
                       "4Ô∏è‚É£ **Resultados**: Voc√™ recebe an√°lises detalhadas\n\n" \
                       "üí° **Tecnologias:**\n" \
                       "‚Ä¢ Python + Pandas para an√°lise\n" \
                       "‚Ä¢ FastAPI para API REST\n" \
                       "‚Ä¢ Sistema multiagente para IA\n\n" \
                       "Tudo automatizado e r√°pido! ‚ö°"
    
    # 4. Perguntas sobre CSV
    elif any(word in message_lower for word in ["csv", "arquivo", "upload", "carregar"]):
        response_text = "üìä **Sobre Arquivos CSV:**\n\n" \
                       "Voc√™ pode fazer upload de arquivos CSV com:\n" \
                       "‚Ä¢ ‚úÖ Dados tabulares\n" \
                       "‚Ä¢ ‚úÖ Qualquer n√∫mero de colunas\n" \
                       "‚Ä¢ ‚úÖ Diversos tipos de an√°lise\n\n" \
                       "**O que fazemos:**\n" \
                       "‚Ä¢ Contagem de linhas/colunas\n" \
                       "‚Ä¢ Estat√≠sticas descritivas\n" \
                       "‚Ä¢ Detec√ß√£o de valores ausentes\n" \
                       "‚Ä¢ Preview dos dados\n\n" \
                       "Use o bot√£o de upload para come√ßar! üì§"
    
    # 5. Perguntas sobre an√°lise
    elif any(word in message_lower for word in ["an√°lise", "analisar", "analise", "insights", "padr√µes", "padroes"]):
        response_text = "üîç **An√°lises Dispon√≠veis:**\n\n" \
                       "**An√°lise B√°sica:**\n" \
                       "‚Ä¢ Estat√≠sticas descritivas\n" \
                       "‚Ä¢ Contagem de valores √∫nicos\n" \
                       "‚Ä¢ Detec√ß√£o de valores ausentes\n\n" \
                       "**An√°lise Avan√ßada** (requer configura√ß√£o):\n" \
                       "‚Ä¢ Detec√ß√£o de fraude com IA\n" \
                       "‚Ä¢ An√°lise preditiva\n" \
                       "‚Ä¢ Clustering de dados\n\n" \
                       "Fa√ßa upload de um CSV para experimentar!"
    
    # 6. Status / Teste
    elif any(word in message_lower for word in ["status", "teste", "test", "funcionando"]):
        files_count = len(uploaded_files)
        response_text = f"‚úÖ **Status do Sistema:**\n\n" \
                       f"‚Ä¢ API: Operacional\n" \
                       f"‚Ä¢ Arquivos carregados: {files_count}\n" \
                       f"‚Ä¢ Modo: Produ√ß√£o\n" \
                       f"‚Ä¢ Vers√£o: 1.0.0\n\n" \
                       f"Tudo funcionando perfeitamente! üöÄ"
    
    # 7. Sobre fraude
    elif any(word in message_lower for word in ["fraude", "fraud", "detec√ß√£o", "detectar"]):
        response_text = "üõ°Ô∏è **Detec√ß√£o de Fraude:**\n\n" \
                       "Para an√°lise de fraude com IA, voc√™ precisa:\n" \
                       "1. Configurar API key do Google Gemini\n" \
                       "2. Fazer upload de dados de transa√ß√µes\n" \
                       "3. Usar a API completa (n√£o a vers√£o simples)\n\n" \
                       "**Recursos de IA:**\n" \
                       "‚Ä¢ An√°lise de padr√µes suspeitos\n" \
                       "‚Ä¢ Scoring de risco\n" \
                       "‚Ä¢ Detec√ß√£o de anomalias\n\n" \
                       "Veja o arquivo SUPORTE_GEMINI.md para configura√ß√£o!"
    
    # 8. Sobre IA/LLM
    elif any(word in message_lower for word in ["ia", "ai", "intelig√™ncia", "llm", "gemini", "openai", "gpt"]):
        response_text = "ü§ñ **Intelig√™ncia Artificial:**\n\n" \
                       "Este sistema suporta m√∫ltiplos LLMs:\n" \
                       "‚Ä¢ üß† Google Gemini (recomendado)\n" \
                       "‚Ä¢ üöÄ Groq (mais r√°pido)\n" \
                       "‚Ä¢ üí¨ OpenAI GPT\n\n" \
                       "**Funcionalidades com IA:**\n" \
                       "‚Ä¢ An√°lise inteligente de dados\n" \
                       "‚Ä¢ Detec√ß√£o de fraude\n" \
                       "‚Ä¢ Insights autom√°ticos\n" \
                       "‚Ä¢ Chat contextual\n\n" \
                       "Configure uma API key para habilitar! üîë"
    
    # 9. Perguntas t√©cnicas
    elif any(word in message_lower for word in ["api", "endpoint", "documenta√ß√£o", "docs"]):
        response_text = "‚öôÔ∏è **Informa√ß√µes T√©cnicas:**\n\n" \
                       "**Endpoints Dispon√≠veis:**\n" \
                       "‚Ä¢ POST /csv/upload - Upload de CSV\n" \
                       "‚Ä¢ GET /csv/files - Lista arquivos\n" \
                       "‚Ä¢ GET /dashboard/metrics - M√©tricas\n" \
                       "‚Ä¢ POST /chat - Este chat\n" \
                       "‚Ä¢ GET /health - Status da API\n\n" \
                       "**Documenta√ß√£o:**\n" \
                       "‚Ä¢ Swagger UI: http://localhost:8000/docs\n" \
                       "‚Ä¢ ReDoc: http://localhost:8000/redoc\n\n" \
                       "Explore e teste os endpoints!"
    
    # 10. Agradecimentos
    elif any(word in message_lower for word in ["obrigado", "obrigada", "valeu", "thanks"]):
        response_text = "üòä Por nada! Estou aqui para ajudar.\n\n" \
                       "Se precisar de mais alguma coisa:\n" \
                       "‚Ä¢ Fa√ßa upload de um CSV\n" \
                       "‚Ä¢ Explore o dashboard\n" \
                       "‚Ä¢ Pergunte sobre funcionalidades\n\n" \
                       "Boa an√°lise de dados! üìä"
    
    # 11. Despedidas
    elif any(word in message_lower for word in ["tchau", "adeus", "bye", "at√©", "ate"]):
        response_text = "üëã At√© logo! Volte sempre que precisar analisar dados.\n\n" \
                       "Boas an√°lises! üìä‚ú®"
    
    # 12. Perguntas sobre dados espec√≠ficos
    elif "dados" in message_lower or "dataset" in message_lower:
        response_text = "üìÅ **Sobre seus Dados:**\n\n" \
                       f"Arquivos carregados: {len(uploaded_files)}\n\n" \
                       "**Formatos aceitos:**\n" \
                       "‚Ä¢ CSV (valores separados por v√≠rgula)\n" \
                       "‚Ä¢ Codifica√ß√£o UTF-8 ou Latin-1\n" \
                       "‚Ä¢ Com ou sem cabe√ßalho\n\n" \
                       "**An√°lises dispon√≠veis:**\n" \
                       "‚Ä¢ Estat√≠sticas descritivas\n" \
                       "‚Ä¢ Distribui√ß√£o de valores\n" \
                       "‚Ä¢ Correla√ß√µes\n" \
                       "‚Ä¢ Visualiza√ß√µes\n\n" \
                       "Fa√ßa upload para come√ßar!"
    
    # 13. Resposta padr√£o mais √∫til
    else:
        response_text = "ü§î Desculpe, n√£o entendi completamente sua pergunta.\n\n" \
                       "**Posso ajudar com:**\n" \
                       "‚Ä¢ üì§ Upload e an√°lise de CSV\n" \
                       "‚Ä¢ üìä Estat√≠sticas e insights\n" \
                       "‚Ä¢ üîç Detec√ß√£o de padr√µes\n" \
                       "‚Ä¢ ‚ùì D√∫vidas sobre o sistema\n\n" \
                       "**Comandos √∫teis:**\n" \
                       "‚Ä¢ Digite 'help' para ver todas as funcionalidades\n" \
                       "‚Ä¢ Digite 'como funciona' para entender o sistema\n" \
                       "‚Ä¢ Digite 'status' para ver informa√ß√µes\n\n" \
                       "Como posso ajudar?"
    
    return ChatResponse(
        response=response_text,
        session_id=request.session_id or "default",
        timestamp=datetime.now().isoformat()
    )

# Armazenamento tempor√°rio em mem√≥ria
uploaded_files = {}

@app.post("/csv/upload", response_model=CSVUploadResponse)
async def upload_csv(file: UploadFile = File(...)):
    """Upload e an√°lise b√°sica de arquivo CSV."""
    try:
        # Validar nome do arquivo
        filename = file.filename or "unknown.csv"
        
        if not filename.endswith('.csv'):
            raise HTTPException(
                status_code=400,
                detail="Apenas arquivos CSV s√£o permitidos"
            )
        
        # Ler arquivo com limite de tamanho
        contents = await file.read()
        
        # Verificar tamanho
        file_size = len(contents)
        if file_size > MAX_FILE_SIZE:
            raise HTTPException(
                status_code=413,
                detail=f"Arquivo muito grande. Tamanho m√°ximo: {MAX_FILE_SIZE // (1024*1024)}MB. Recebido: {file_size // (1024*1024)}MB"
            )
        df = pd.read_csv(io.BytesIO(contents))
        
        # Gerar ID √∫nico
        file_id = f"csv_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # Armazenar em mem√≥ria
        uploaded_files[file_id] = {
            'filename': filename,
            'dataframe': df,
            'uploaded_at': datetime.now().isoformat()
        }
        
        # Preparar preview (primeiras 5 linhas)
        preview = df.head(5).to_dict(orient='records')
        
        return CSVUploadResponse(
            file_id=file_id,
            filename=filename,
            rows=len(df),
            columns=len(df.columns),
            message=f"Arquivo '{filename}' carregado com sucesso!",
            columns_list=df.columns.tolist(),
            preview={'data': preview, 'total_preview_rows': len(preview)}
        )
        
    except pd.errors.EmptyDataError:
        raise HTTPException(status_code=400, detail="Arquivo CSV est√° vazio")
    except pd.errors.ParserError:
        raise HTTPException(status_code=400, detail="Erro ao processar CSV. Verifique o formato.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao processar arquivo: {str(e)}")

@app.get("/csv/files")
async def list_csv_files():
    """Lista todos os arquivos CSV carregados."""
    files_info = []
    for file_id, info in uploaded_files.items():
        files_info.append({
            'file_id': file_id,
            'filename': info['filename'],
            'uploaded_at': info['uploaded_at'],
            'rows': len(info['dataframe']),
            'columns': len(info['dataframe'].columns)
        })
    
    return {
        'total': len(files_info),
        'files': files_info
    }

@app.get("/dashboard/metrics", response_model=DashboardMetrics)
async def get_dashboard_metrics():
    """M√©tricas do dashboard."""
    total_rows = sum(len(info['dataframe']) for info in uploaded_files.values())
    total_columns = sum(len(info['dataframe'].columns) for info in uploaded_files.values())
    
    return DashboardMetrics(
        total_files=len(uploaded_files),
        total_rows=total_rows,
        total_columns=total_columns,
        status="operational",
        timestamp=datetime.now().isoformat()
    )

@app.get("/api/config")
async def get_api_config():
    """Retorna configura√ß√£o da API para o frontend."""
    return {
        "mode": "production",  # N√£o √© demo
        "features": {
            "csv_upload": True,
            "csv_analysis": True,
            "chat": True,
            "dashboard": True,
            "llm_analysis": False,  # N√£o dispon√≠vel sem API keys
            "rag_search": False,  # N√£o dispon√≠vel sem Supabase
        },
        "version": "1.0.0",
        "status": "operational"
    }

@app.get("/endpoints")
async def list_endpoints():
    """Lista todos os endpoints dispon√≠veis."""
    return {
        "available_endpoints": [
            {
                "path": "/",
                "method": "GET",
                "description": "Informa√ß√µes da API"
            },
            {
                "path": "/health", 
                "method": "GET",
                "description": "Status de sa√∫de"
            },
            {
                "path": "/chat",
                "method": "POST", 
                "description": "Chat com IA (vers√£o demo)"
            },
            {
                "path": "/csv/upload",
                "method": "POST", 
                "description": "Upload de arquivo CSV"
            },
            {
                "path": "/csv/files",
                "method": "GET", 
                "description": "Lista arquivos carregados"
            },
            {
                "path": "/dashboard/metrics",
                "method": "GET", 
                "description": "M√©tricas do dashboard"
            },
            {
                "path": "/endpoints",
                "method": "GET",
                "description": "Lista de endpoints"
            },
            {
                "path": "/docs",
                "method": "GET", 
                "description": "Documenta√ß√£o Swagger"
            },
            {
                "path": "/redoc",
                "method": "GET",
                "description": "Documenta√ß√£o ReDoc"
            }
        ],
        "note": "API totalmente funcional para an√°lise de CSV e processamento de dados."
    }

# Tratamento de erros
@app.exception_handler(404)
async def not_found_handler(request, exc):
    return JSONResponse(
        status_code=404,
        content={
            "error": "Endpoint n√£o encontrado",
            "message": f"O endpoint {request.url.path} n√£o existe",
            "available_endpoints": "/endpoints"
        }
    )

@app.exception_handler(500)
async def internal_error_handler(request, exc):
    return JSONResponse(
        status_code=500,
        content={
            "error": "Erro interno do servidor",
            "message": "Algo deu errado. Verifique os logs.",
            "contact": "Consulte a documenta√ß√£o em /docs"
        }
    )

def main():
    """Iniciar servidor."""
    print("üöÄ Iniciando API Simples - EDA AI Minds")
    print("=" * 50)
    print("üìç URL: http://localhost:8000")
    print("üìö Docs: http://localhost:8000/docs")
    print("üìã ReDoc: http://localhost:8000/redoc")
    print("‚èπÔ∏è Pressione Ctrl+C para parar")
    print()
    
    try:
        uvicorn.run(
            "api_simple:app",
            host="0.0.0.0", 
            port=8000,
            reload=True,
            log_level="info"
        )
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è API parada pelo usu√°rio")

if __name__ == "__main__":
    main()