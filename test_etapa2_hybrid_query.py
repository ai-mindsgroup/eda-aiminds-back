"""
Teste da ETAPA 2 - An√°lises Complementares e Chunking Inteligente

Valida:
1. Query SIMPLE (usa chunks existentes)
2. Query COMPLEX (fallback para CSV)
3. Gera√ß√£o de chunks adicionais
4. Resposta contextualizada via LLM
"""

import sys
from pathlib import Path

# Adicionar src ao path
sys.path.insert(0, str(Path(__file__).parent))

from src.agent.rag_agent import RAGAgent
from src.embeddings.generator import EmbeddingProvider
from src.utils.logging_config import get_logger

logger = get_logger(__name__)


def test_etapa2_simple_query():
    """
    Teste 1: Query SIMPLE
    Pergunta: "Quantas colunas num√©ricas existem no dataset?"
    Esperado: Usa apenas chunks anal√≠ticos (metadata_types)
    """
    print("\n" + "="*80)
    print("TESTE 1: QUERY SIMPLE - Usando Chunks Anal√≠ticos Existentes")
    print("="*80)
    
    # Inicializar agente
    agent = RAGAgent(embedding_provider=EmbeddingProvider.SENTENCE_TRANSFORMER)
    
    # Query simples
    query = "Quantas colunas num√©ricas existem no dataset?"
    source_id = "creditcard_7e30850a"  # Usar o source_id real dos chunks inseridos
    
    print(f"\nüìù Query: {query}")
    print(f"üìä Source ID: {source_id}")
    
    # Processar
    result = agent.process_query_hybrid(query, source_id)
    
    # Verificar resultado
    print(f"\n‚úÖ Status: {result.get('metadata', {}).get('strategy', 'N/A')}")
    print(f"üì¶ Chunks usados: {result.get('metadata', {}).get('chunks_used', [])}")
    print(f"üíæ CSV acessado: {result.get('metadata', {}).get('csv_accessed', False)}")
    print(f"\nüí¨ Resposta:\n{result.get('response', 'N/A')[:500]}...")
    
    # Valida√ß√µes
    assert result.get('metadata', {}).get('strategy') == 'simple', "Deveria usar estrat√©gia SIMPLE"
    assert not result.get('metadata', {}).get('csv_accessed'), "N√£o deveria acessar CSV"
    assert len(result.get('metadata', {}).get('chunks_used', [])) > 0, "Deveria usar chunks"
    
    print("\n‚úÖ TESTE 1 PASSOU!")
    return result


def test_etapa2_complex_query():
    """
    Teste 2: Query COMPLEX
    Pergunta: "Gere um gr√°fico de dispers√£o das colunas V1 e V2"
    Esperado: Fallback para CSV + gera chunks adicionais
    """
    print("\n" + "="*80)
    print("TESTE 2: QUERY COMPLEX - Fallback para CSV Completo")
    print("="*80)
    
    # Inicializar agente
    agent = RAGAgent(embedding_provider=EmbeddingProvider.SENTENCE_TRANSFORMER)
    
    # Query complexa
    query = "Gere um gr√°fico de dispers√£o mostrando a rela√ß√£o entre as primeiras colunas num√©ricas"
    source_id = "creditcard_7e30850a"
    
    print(f"\nüìù Query: {query}")
    print(f"üìä Source ID: {source_id}")
    
    # Processar
    result = agent.process_query_hybrid(query, source_id)
    
    # Verificar resultado
    print(f"\n‚úÖ Status: {result.get('metadata', {}).get('strategy', 'N/A')}")
    print(f"üì¶ Chunks usados: {result.get('metadata', {}).get('chunks_used', [])}")
    print(f"üíæ CSV acessado: {result.get('metadata', {}).get('csv_accessed', False)}")
    print(f"üÜï Novos chunks gerados: {result.get('metadata', {}).get('new_chunks_generated', 0)}")
    print(f"üìä DataFrame shape: {result.get('metadata', {}).get('dataframe_shape', 'N/A')}")
    print(f"\nüí¨ Resposta:\n{result.get('response', 'N/A')[:500]}...")
    
    # Valida√ß√µes
    assert result.get('metadata', {}).get('strategy') == 'complex', "Deveria usar estrat√©gia COMPLEX"
    assert result.get('metadata', {}).get('csv_accessed'), "Deveria acessar CSV"
    assert result.get('metadata', {}).get('dataframe_shape') is not None, "Deveria ter shape do DataFrame"
    
    print("\n‚úÖ TESTE 2 PASSOU!")
    return result


def test_etapa2_outliers_query():
    """
    Teste 3: Query sobre OUTLIERS
    Pergunta: "Quais colunas t√™m outliers e quantos s√£o?"
    Esperado: Pode ser SIMPLE (se chunks existem) ou COMPLEX (an√°lise detalhada)
    """
    print("\n" + "="*80)
    print("TESTE 3: QUERY OUTLIERS - An√°lise de Valores At√≠picos")
    print("="*80)
    
    # Inicializar agente
    agent = RAGAgent(embedding_provider=EmbeddingProvider.SENTENCE_TRANSFORMER)
    
    # Query sobre outliers
    query = "Quais colunas do dataset possuem outliers e em que quantidade?"
    source_id = "creditcard_7e30850a"
    
    print(f"\nüìù Query: {query}")
    print(f"üìä Source ID: {source_id}")
    
    # Processar
    result = agent.process_query_hybrid(query, source_id)
    
    # Verificar resultado
    print(f"\n‚úÖ Status: {result.get('metadata', {}).get('strategy', 'N/A')}")
    print(f"üì¶ Chunks usados: {result.get('metadata', {}).get('chunks_used', [])}")
    print(f"üíæ CSV acessado: {result.get('metadata', {}).get('csv_accessed', False)}")
    print(f"\nüí¨ Resposta:\n{result.get('response', 'N/A')[:500]}...")
    
    # Valida√ß√£o flex√≠vel (pode ser SIMPLE ou COMPLEX)
    assert result.get('metadata', {}).get('strategy') in ['simple', 'complex'], "Deve ter estrat√©gia v√°lida"
    
    print("\n‚úÖ TESTE 3 PASSOU!")
    return result


def test_etapa2_batch_queries():
    """
    Teste 4: M√∫ltiplas queries para validar caching e performance
    """
    print("\n" + "="*80)
    print("TESTE 4: BATCH DE QUERIES - Valida√ß√£o de Performance")
    print("="*80)
    
    # Inicializar agente
    agent = RAGAgent(embedding_provider=EmbeddingProvider.SENTENCE_TRANSFORMER)
    source_id = "creditcard_7e30850a"
    
    queries = [
        "Qual √© a estrutura do dataset?",
        "Quais s√£o as m√©dias das colunas num√©ricas?",
        "Existem correla√ß√µes fortes entre vari√°veis?",
        "Mostre estat√≠sticas descritivas completas"
    ]
    
    results = []
    
    for i, query in enumerate(queries, 1):
        print(f"\nüìù Query {i}/{len(queries)}: {query}")
        
        result = agent.process_query_hybrid(query, source_id)
        results.append(result)
        
        strategy = result.get('metadata', {}).get('strategy', 'N/A')
        csv_accessed = result.get('metadata', {}).get('csv_accessed', False)
        
        print(f"   ‚úÖ Estrat√©gia: {strategy} | CSV: {csv_accessed}")
    
    # Valida√ß√µes
    assert len(results) == len(queries), "Todas as queries devem ter resultado"
    
    # Pelo menos uma deve ser SIMPLE
    simple_count = sum(1 for r in results if r.get('metadata', {}).get('strategy') == 'simple')
    assert simple_count > 0, "Pelo menos uma query deve ser SIMPLE"
    
    print(f"\n‚úÖ TESTE 4 PASSOU! ({len(queries)} queries processadas)")
    return results


if __name__ == "__main__":
    print("\n" + "="*80)
    print("üöÄ INICIANDO TESTES DA ETAPA 2")
    print("AN√ÅLISES COMPLEMENTARES E CHUNKING INTELIGENTE")
    print("="*80)
    
    try:
        # Teste 1: Query SIMPLE
        result1 = test_etapa2_simple_query()
        
        # Teste 2: Query COMPLEX
        result2 = test_etapa2_complex_query()
        
        # Teste 3: Query OUTLIERS
        result3 = test_etapa2_outliers_query()
        
        # Teste 4: Batch de queries
        results4 = test_etapa2_batch_queries()
        
        print("\n" + "="*80)
        print("‚úÖ TODOS OS TESTES DA ETAPA 2 PASSARAM!")
        print("="*80)
        print("\nüìä RESUMO:")
        print(f"   ‚Ä¢ Teste 1 (SIMPLE): ‚úÖ")
        print(f"   ‚Ä¢ Teste 2 (COMPLEX): ‚úÖ")
        print(f"   ‚Ä¢ Teste 3 (OUTLIERS): ‚úÖ")
        print(f"   ‚Ä¢ Teste 4 (BATCH): ‚úÖ")
        print("\nüéØ Sistema de consulta h√≠brida funcionando perfeitamente!")
        
    except AssertionError as e:
        print(f"\n‚ùå TESTE FALHOU: {e}")
        sys.exit(1)
    
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
